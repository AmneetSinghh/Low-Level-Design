



// so Board has array.

// board is independent from the game.

// power of composition.
public class TicTacToeGame implements TicTocGameI{

    Deque<Player> players;
    Board gameBoard;
    WinnerStrategy winnerStrategy;

    public TicTacToeGame( WinnerStrategy winnerStrategy){
        this.winnerStrategy = winnerStrategy;
    }


    public void initializeGame(){

        //creating 2 Players
       players = new LinkedList<>();
        Player player1 = new Player("Player1", new PlayingPieceX());// assiing the piece to the player
        Player player2 = new Player("Player2", new PlayingPieceO());
        players.add(player1);
        players.add(player2);
        //initializeBoard
        gameBoard = new Board(3);
    }

    public String startGame(){

        boolean noWinner = true;
        while(noWinner){

            //take out the player whose turn is and also put the player in the list back
            Player playerTurn = players.removeFirst();

            //get the free space from the board
            gameBoard.printBoard();
            List<Pair<Integer, Integer>> freeSpaces =  gameBoard.getFreeCells();
            if(freeSpaces.isEmpty()) {
                noWinner = false;
                continue;
            }

            //read the user input
            System.out.print("Player:" + playerTurn.name + " Enter row,column: ");
            Scanner inputScanner = new Scanner(System.in);
            String s = inputScanner.nextLine();
            String[] values = s.split(",");
            int inputRow = Integer.valueOf(values[0]);// row
            int inputColumn = Integer.valueOf(values[1]);// col


            //place the piece
            boolean pieceAddedSuccessfully = gameBoard.addPiece(inputRow,inputColumn, playerTurn.playingPiece);
            if(!pieceAddedSuccessfully) {
                //player can not insert the piece into this cell, player has to choose another cell
                System.out.println("Incorredt possition chosen, try again");
                players.addFirst(playerTurn);// same player turn.
                continue;
            }
            players.addLast(playerTurn);

            boolean winner = isThereWinner(inputRow, inputColumn, playerTurn.playingPiece.pieceType); // no need to give pieceType.
            /*
             * 
             *  if ther are multiple strategies for the winner, make in the different class. winnerStrategy class.
             */
            if(winner) {
                return playerTurn.name;
            }
        }

        return "tie";
    }


}
