violations : 











solutions : 
1. High level modules. or the low level modules in your code should not depend on the actual implementation, they should depend on abstractions.
2. Abstraction shuld not depend on details, details should depend on abstractions. (Jo function abstraction provide kruga ohi function low level modules exporse krugy simple,,,,,,,,)
3. lets say we have store that uses stripe api for payments, so store is dependent on stripe api, if in future we want to change stripe to paypal then issues,
we need to change everywhere we useed that stripe api, so  basically in store calss we dpeended on implementation of stripe.
So higher level modeules examle store needs to depend on abstractions. interface not actual classs implementatioon of paypal or stripe api...... So we make new paymewnt processor wrapper for stripe api.
so payment processor is class or interface that is the intermediate layer. So now store use payment processor.



5. Details change they should not affect the abstraction. The abstraction is the way clients view an object. Exactly what goes on inside the object is not important. Lets take a car for example, the pedals and steering wheel and gear lever are abstractions of what happens inside the engine. They do not depend on the details though because if someone changes my old engine for a new one I should still be able to drive the car without knowing that the engine changed.

The details on the other hand MUST conform to what the abstraction says. I would not want to implement an engine that suddenly causes the brakes to double the speed of the car. I can re-implement brakes any way I want as long as externally they behave the same way.
6. No class should hold a reference to a concrete class.








links : 
http://stg-tud.github.io/sedc/Lecture/ws13-14/3.5-DIP.html#mode=document (Best example)
https://medium.com/@kedren.villena/simplifying-dependency-inversion-principle-dip-59228122649
https://www.youtube.com/watch?v=9oHY5TllWaU&t=28s