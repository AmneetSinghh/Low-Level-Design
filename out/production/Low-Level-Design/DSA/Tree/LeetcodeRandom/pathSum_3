class Solution {
public:
    
    // preorder traverse tree from root to leaf and store prefix sum count in Map
    void traverse(TreeNode* root,int &sum, int &target, int &count, unordered_map<int,int>&track)
    {
        if(!root) return;
        
        sum += root->val;
        
        // update path sum count from Map count
        if(track[sum-target]>0)count+=track[sum-target];
        
        // store prefix sum count in Map
        track[sum]++;
        
        // traverse to child node 
        traverse(root->left,sum,target,count,track);
        traverse(root->right,sum,target,count,track);
        
        // undo prefix sum count in Map
        track[sum]--;
        sum-= root->val;        
    }
    
    int pathSum(TreeNode* root, int targetSum) {
        
        // track prefix sum count
        unordered_map<int,int>track;
        
        // default value 0 has count 1
        track[0]++;
        
        // prefix sum
        int sum = 0;
        
        // path sum count
        int count = 0;
        
        traverse(root,sum,targetSum,count,track);
        
        return count;
    }
};