
node* kthlargest(node* root,int& k)
{
	if(root==NULL)
	return NULL;
	
	node* right=kthlargest(root->right,k);
	if(right!=NULL)
	return right;
	k--;
	
	if(k==0)
	return root;
	
	return kthlargest(root->left,k);
}

node* kthsmallest(node* root,int &k)
{
	if(root==NULL)
	return NULL;
	
	node* left=kthsmallest(root->left,k);
	if(left!=NULL)
	return left;
	k--;
	if(k==0)
	return root;
	
	return kthsmallest(root->right,k);
}



/*
Time complexity: O(H+k)O(H + k)O(H+k), where HHH is a tree height. 
This complexity is defined by the stack, which contains at least 
H+kH + kH+k elements, since before starting to pop out one has to

 go down to a leaf. This results in O(log‚Å°N+k)O(\log N + k)O(logN+k) 
 for the balanced tree and O(N+k)O(N + k)O(N+k) for completely unbalanced
  tree with all the nodes in the left subtree.
  */